//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-28540450
// Cuda compilation tools, release 11.0, V11.0.194
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_75
.address_size 64

	// .globl	_Z17convertFp32ToFp16P6__halfPfi

.visible .entry _Z17convertFp32ToFp16P6__halfPfi(
	.param .u64 _Z17convertFp32ToFp16P6__halfPfi_param_0,
	.param .u64 _Z17convertFp32ToFp16P6__halfPfi_param_1,
	.param .u32 _Z17convertFp32ToFp16P6__halfPfi_param_2
)
{
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<2>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<9>;


	ld.param.u64 	%rd1, [_Z17convertFp32ToFp16P6__halfPfi_param_0];
	ld.param.u64 	%rd2, [_Z17convertFp32ToFp16P6__halfPfi_param_1];
	ld.param.u32 	%r2, [_Z17convertFp32ToFp16P6__halfPfi_param_2];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r4, %r3, %r5;
	setp.ge.s32	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	cvta.to.global.u64 	%rd3, %rd2;
	mul.wide.s32 	%rd4, %r1, 4;
	add.s64 	%rd5, %rd3, %rd4;
	ld.global.f32 	%f1, [%rd5];
	// inline asm
	{  cvt.rn.f16.f32 %rs1, %f1;}

	// inline asm
	cvta.to.global.u64 	%rd6, %rd1;
	mul.wide.s32 	%rd7, %r1, 2;
	add.s64 	%rd8, %rd6, %rd7;
	st.global.u16 	[%rd8], %rs1;

BB0_2:
	ret;
}

	// .globl	_Z12PowerKernal1PK6__halfS1_PS_i
.visible .entry _Z12PowerKernal1PK6__halfS1_PS_i(
	.param .u64 _Z12PowerKernal1PK6__halfS1_PS_i_param_0,
	.param .u64 _Z12PowerKernal1PK6__halfS1_PS_i_param_1,
	.param .u64 _Z12PowerKernal1PK6__halfS1_PS_i_param_2,
	.param .u32 _Z12PowerKernal1PK6__halfS1_PS_i_param_3
)
{
	.reg .pred 	%p<6>;
	.reg .b16 	%rs<1840>;
	.reg .b32 	%r<31>;
	.reg .b64 	%rd<13>;


	ld.param.u64 	%rd2, [_Z12PowerKernal1PK6__halfS1_PS_i_param_0];
	ld.param.u64 	%rd3, [_Z12PowerKernal1PK6__halfS1_PS_i_param_1];
	ld.param.u32 	%r10, [_Z12PowerKernal1PK6__halfS1_PS_i_param_3];
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %ntid.x;
	mov.u32 	%r14, %tid.x;
	mad.lo.s32 	%r1, %r12, %r13, %r14;
	mov.u32 	%r28, 0;
	// inline asm
	cvt.rn.f16.s32 %rs1839, %r28;
	// inline asm
	setp.lt.s32	%p1, %r10, 1;
	@%p1 bra 	BB1_1;

	cvta.to.global.u64 	%rd5, %rd2;
	cvta.to.global.u64 	%rd6, %rd3;
	mul.wide.s32 	%rd7, %r1, 2;
	add.s64 	%rd8, %rd6, %rd7;
	ld.global.u16 	%rs2, [%rd8];
	add.s64 	%rd9, %rd5, %rd7;
	ld.global.u16 	%rs3, [%rd9];
	mul.hi.s32 	%r17, %r10, 1374389535;
	shr.u32 	%r18, %r17, 31;
	shr.s32 	%r19, %r17, 5;
	add.s32 	%r20, %r19, %r18;
	mul.lo.s32 	%r29, %r20, 100;
	setp.lt.s32	%p2, %r29, 1;
	@%p2 bra 	BB1_3;

	// inline asm
	{add.f16 %rs14,%rs3,%rs2;
}
	// inline asm
	// inline asm
	{sub.f16 %rs17,%rs3,%rs2;
}
	// inline asm

BB1_5:
	.pragma "nounroll";
	// inline asm
	{add.f16 %rs20,%rs14,%rs1839;
}
	// inline asm
	// inline asm
	{add.f16 %rs23,%rs20,%rs1839;
}
	// inline asm
	// inline asm
	{sub.f16 %rs26,%rs17,%rs23;
}
	// inline asm
	// inline asm
	{add.f16 %rs38,%rs14,%rs26;
}
	// inline asm
	// inline asm
	{add.f16 %rs41,%rs38,%rs26;
}
	// inline asm
	// inline asm
	{sub.f16 %rs44,%rs17,%rs41;
}
	// inline asm
	// inline asm
	{add.f16 %rs56,%rs14,%rs44;
}
	// inline asm
	// inline asm
	{add.f16 %rs59,%rs56,%rs44;
}
	// inline asm
	// inline asm
	{sub.f16 %rs62,%rs17,%rs59;
}
	// inline asm
	// inline asm
	{add.f16 %rs74,%rs14,%rs62;
}
	// inline asm
	// inline asm
	{add.f16 %rs77,%rs74,%rs62;
}
	// inline asm
	// inline asm
	{sub.f16 %rs80,%rs17,%rs77;
}
	// inline asm
	// inline asm
	{add.f16 %rs92,%rs14,%rs80;
}
	// inline asm
	// inline asm
	{add.f16 %rs95,%rs92,%rs80;
}
	// inline asm
	// inline asm
	{sub.f16 %rs98,%rs17,%rs95;
}
	// inline asm
	// inline asm
	{add.f16 %rs110,%rs14,%rs98;
}
	// inline asm
	// inline asm
	{add.f16 %rs113,%rs110,%rs98;
}
	// inline asm
	// inline asm
	{sub.f16 %rs116,%rs17,%rs113;
}
	// inline asm
	// inline asm
	{add.f16 %rs128,%rs14,%rs116;
}
	// inline asm
	// inline asm
	{add.f16 %rs131,%rs128,%rs116;
}
	// inline asm
	// inline asm
	{sub.f16 %rs134,%rs17,%rs131;
}
	// inline asm
	// inline asm
	{add.f16 %rs146,%rs14,%rs134;
}
	// inline asm
	// inline asm
	{add.f16 %rs149,%rs146,%rs134;
}
	// inline asm
	// inline asm
	{sub.f16 %rs152,%rs17,%rs149;
}
	// inline asm
	// inline asm
	{add.f16 %rs164,%rs14,%rs152;
}
	// inline asm
	// inline asm
	{add.f16 %rs167,%rs164,%rs152;
}
	// inline asm
	// inline asm
	{sub.f16 %rs170,%rs17,%rs167;
}
	// inline asm
	// inline asm
	{add.f16 %rs182,%rs14,%rs170;
}
	// inline asm
	// inline asm
	{add.f16 %rs185,%rs182,%rs170;
}
	// inline asm
	// inline asm
	{sub.f16 %rs188,%rs17,%rs185;
}
	// inline asm
	// inline asm
	{add.f16 %rs200,%rs14,%rs188;
}
	// inline asm
	// inline asm
	{add.f16 %rs203,%rs200,%rs188;
}
	// inline asm
	// inline asm
	{sub.f16 %rs206,%rs17,%rs203;
}
	// inline asm
	// inline asm
	{add.f16 %rs218,%rs14,%rs206;
}
	// inline asm
	// inline asm
	{add.f16 %rs221,%rs218,%rs206;
}
	// inline asm
	// inline asm
	{sub.f16 %rs224,%rs17,%rs221;
}
	// inline asm
	// inline asm
	{add.f16 %rs236,%rs14,%rs224;
}
	// inline asm
	// inline asm
	{add.f16 %rs239,%rs236,%rs224;
}
	// inline asm
	// inline asm
	{sub.f16 %rs242,%rs17,%rs239;
}
	// inline asm
	// inline asm
	{add.f16 %rs254,%rs14,%rs242;
}
	// inline asm
	// inline asm
	{add.f16 %rs257,%rs254,%rs242;
}
	// inline asm
	// inline asm
	{sub.f16 %rs260,%rs17,%rs257;
}
	// inline asm
	// inline asm
	{add.f16 %rs272,%rs14,%rs260;
}
	// inline asm
	// inline asm
	{add.f16 %rs275,%rs272,%rs260;
}
	// inline asm
	// inline asm
	{sub.f16 %rs278,%rs17,%rs275;
}
	// inline asm
	// inline asm
	{add.f16 %rs290,%rs14,%rs278;
}
	// inline asm
	// inline asm
	{add.f16 %rs293,%rs290,%rs278;
}
	// inline asm
	// inline asm
	{sub.f16 %rs296,%rs17,%rs293;
}
	// inline asm
	// inline asm
	{add.f16 %rs308,%rs14,%rs296;
}
	// inline asm
	// inline asm
	{add.f16 %rs311,%rs308,%rs296;
}
	// inline asm
	// inline asm
	{sub.f16 %rs314,%rs17,%rs311;
}
	// inline asm
	// inline asm
	{add.f16 %rs326,%rs14,%rs314;
}
	// inline asm
	// inline asm
	{add.f16 %rs329,%rs326,%rs314;
}
	// inline asm
	// inline asm
	{sub.f16 %rs332,%rs17,%rs329;
}
	// inline asm
	// inline asm
	{add.f16 %rs344,%rs14,%rs332;
}
	// inline asm
	// inline asm
	{add.f16 %rs347,%rs344,%rs332;
}
	// inline asm
	// inline asm
	{sub.f16 %rs350,%rs17,%rs347;
}
	// inline asm
	// inline asm
	{add.f16 %rs362,%rs14,%rs350;
}
	// inline asm
	// inline asm
	{add.f16 %rs365,%rs362,%rs350;
}
	// inline asm
	// inline asm
	{sub.f16 %rs368,%rs17,%rs365;
}
	// inline asm
	// inline asm
	{add.f16 %rs380,%rs14,%rs368;
}
	// inline asm
	// inline asm
	{add.f16 %rs383,%rs380,%rs368;
}
	// inline asm
	// inline asm
	{sub.f16 %rs386,%rs17,%rs383;
}
	// inline asm
	// inline asm
	{add.f16 %rs398,%rs14,%rs386;
}
	// inline asm
	// inline asm
	{add.f16 %rs401,%rs398,%rs386;
}
	// inline asm
	// inline asm
	{sub.f16 %rs404,%rs17,%rs401;
}
	// inline asm
	// inline asm
	{add.f16 %rs416,%rs14,%rs404;
}
	// inline asm
	// inline asm
	{add.f16 %rs419,%rs416,%rs404;
}
	// inline asm
	// inline asm
	{sub.f16 %rs422,%rs17,%rs419;
}
	// inline asm
	// inline asm
	{add.f16 %rs434,%rs14,%rs422;
}
	// inline asm
	// inline asm
	{add.f16 %rs437,%rs434,%rs422;
}
	// inline asm
	// inline asm
	{sub.f16 %rs440,%rs17,%rs437;
}
	// inline asm
	// inline asm
	{add.f16 %rs452,%rs14,%rs440;
}
	// inline asm
	// inline asm
	{add.f16 %rs455,%rs452,%rs440;
}
	// inline asm
	// inline asm
	{sub.f16 %rs458,%rs17,%rs455;
}
	// inline asm
	// inline asm
	{add.f16 %rs470,%rs14,%rs458;
}
	// inline asm
	// inline asm
	{add.f16 %rs473,%rs470,%rs458;
}
	// inline asm
	// inline asm
	{sub.f16 %rs476,%rs17,%rs473;
}
	// inline asm
	// inline asm
	{add.f16 %rs488,%rs14,%rs476;
}
	// inline asm
	// inline asm
	{add.f16 %rs491,%rs488,%rs476;
}
	// inline asm
	// inline asm
	{sub.f16 %rs494,%rs17,%rs491;
}
	// inline asm
	// inline asm
	{add.f16 %rs506,%rs14,%rs494;
}
	// inline asm
	// inline asm
	{add.f16 %rs509,%rs506,%rs494;
}
	// inline asm
	// inline asm
	{sub.f16 %rs512,%rs17,%rs509;
}
	// inline asm
	// inline asm
	{add.f16 %rs524,%rs14,%rs512;
}
	// inline asm
	// inline asm
	{add.f16 %rs527,%rs524,%rs512;
}
	// inline asm
	// inline asm
	{sub.f16 %rs530,%rs17,%rs527;
}
	// inline asm
	// inline asm
	{add.f16 %rs542,%rs14,%rs530;
}
	// inline asm
	// inline asm
	{add.f16 %rs545,%rs542,%rs530;
}
	// inline asm
	// inline asm
	{sub.f16 %rs548,%rs17,%rs545;
}
	// inline asm
	// inline asm
	{add.f16 %rs560,%rs14,%rs548;
}
	// inline asm
	// inline asm
	{add.f16 %rs563,%rs560,%rs548;
}
	// inline asm
	// inline asm
	{sub.f16 %rs566,%rs17,%rs563;
}
	// inline asm
	// inline asm
	{add.f16 %rs578,%rs14,%rs566;
}
	// inline asm
	// inline asm
	{add.f16 %rs581,%rs578,%rs566;
}
	// inline asm
	// inline asm
	{sub.f16 %rs584,%rs17,%rs581;
}
	// inline asm
	// inline asm
	{add.f16 %rs596,%rs14,%rs584;
}
	// inline asm
	// inline asm
	{add.f16 %rs599,%rs596,%rs584;
}
	// inline asm
	// inline asm
	{sub.f16 %rs602,%rs17,%rs599;
}
	// inline asm
	// inline asm
	{add.f16 %rs614,%rs14,%rs602;
}
	// inline asm
	// inline asm
	{add.f16 %rs617,%rs614,%rs602;
}
	// inline asm
	// inline asm
	{sub.f16 %rs620,%rs17,%rs617;
}
	// inline asm
	// inline asm
	{add.f16 %rs632,%rs14,%rs620;
}
	// inline asm
	// inline asm
	{add.f16 %rs635,%rs632,%rs620;
}
	// inline asm
	// inline asm
	{sub.f16 %rs638,%rs17,%rs635;
}
	// inline asm
	// inline asm
	{add.f16 %rs650,%rs14,%rs638;
}
	// inline asm
	// inline asm
	{add.f16 %rs653,%rs650,%rs638;
}
	// inline asm
	// inline asm
	{sub.f16 %rs656,%rs17,%rs653;
}
	// inline asm
	// inline asm
	{add.f16 %rs668,%rs14,%rs656;
}
	// inline asm
	// inline asm
	{add.f16 %rs671,%rs668,%rs656;
}
	// inline asm
	// inline asm
	{sub.f16 %rs674,%rs17,%rs671;
}
	// inline asm
	// inline asm
	{add.f16 %rs686,%rs14,%rs674;
}
	// inline asm
	// inline asm
	{add.f16 %rs689,%rs686,%rs674;
}
	// inline asm
	// inline asm
	{sub.f16 %rs692,%rs17,%rs689;
}
	// inline asm
	// inline asm
	{add.f16 %rs704,%rs14,%rs692;
}
	// inline asm
	// inline asm
	{add.f16 %rs707,%rs704,%rs692;
}
	// inline asm
	// inline asm
	{sub.f16 %rs710,%rs17,%rs707;
}
	// inline asm
	// inline asm
	{add.f16 %rs722,%rs14,%rs710;
}
	// inline asm
	// inline asm
	{add.f16 %rs725,%rs722,%rs710;
}
	// inline asm
	// inline asm
	{sub.f16 %rs728,%rs17,%rs725;
}
	// inline asm
	// inline asm
	{add.f16 %rs740,%rs14,%rs728;
}
	// inline asm
	// inline asm
	{add.f16 %rs743,%rs740,%rs728;
}
	// inline asm
	// inline asm
	{sub.f16 %rs746,%rs17,%rs743;
}
	// inline asm
	// inline asm
	{add.f16 %rs758,%rs14,%rs746;
}
	// inline asm
	// inline asm
	{add.f16 %rs761,%rs758,%rs746;
}
	// inline asm
	// inline asm
	{sub.f16 %rs764,%rs17,%rs761;
}
	// inline asm
	// inline asm
	{add.f16 %rs776,%rs14,%rs764;
}
	// inline asm
	// inline asm
	{add.f16 %rs779,%rs776,%rs764;
}
	// inline asm
	// inline asm
	{sub.f16 %rs782,%rs17,%rs779;
}
	// inline asm
	// inline asm
	{add.f16 %rs794,%rs14,%rs782;
}
	// inline asm
	// inline asm
	{add.f16 %rs797,%rs794,%rs782;
}
	// inline asm
	// inline asm
	{sub.f16 %rs800,%rs17,%rs797;
}
	// inline asm
	// inline asm
	{add.f16 %rs812,%rs14,%rs800;
}
	// inline asm
	// inline asm
	{add.f16 %rs815,%rs812,%rs800;
}
	// inline asm
	// inline asm
	{sub.f16 %rs818,%rs17,%rs815;
}
	// inline asm
	// inline asm
	{add.f16 %rs830,%rs14,%rs818;
}
	// inline asm
	// inline asm
	{add.f16 %rs833,%rs830,%rs818;
}
	// inline asm
	// inline asm
	{sub.f16 %rs836,%rs17,%rs833;
}
	// inline asm
	// inline asm
	{add.f16 %rs848,%rs14,%rs836;
}
	// inline asm
	// inline asm
	{add.f16 %rs851,%rs848,%rs836;
}
	// inline asm
	// inline asm
	{sub.f16 %rs854,%rs17,%rs851;
}
	// inline asm
	// inline asm
	{add.f16 %rs866,%rs14,%rs854;
}
	// inline asm
	// inline asm
	{add.f16 %rs869,%rs866,%rs854;
}
	// inline asm
	// inline asm
	{sub.f16 %rs872,%rs17,%rs869;
}
	// inline asm
	// inline asm
	{add.f16 %rs884,%rs14,%rs872;
}
	// inline asm
	// inline asm
	{add.f16 %rs887,%rs884,%rs872;
}
	// inline asm
	// inline asm
	{sub.f16 %rs890,%rs17,%rs887;
}
	// inline asm
	// inline asm
	{add.f16 %rs902,%rs14,%rs890;
}
	// inline asm
	// inline asm
	{add.f16 %rs905,%rs902,%rs890;
}
	// inline asm
	// inline asm
	{sub.f16 %rs908,%rs17,%rs905;
}
	// inline asm
	// inline asm
	{add.f16 %rs920,%rs14,%rs908;
}
	// inline asm
	// inline asm
	{add.f16 %rs923,%rs920,%rs908;
}
	// inline asm
	// inline asm
	{sub.f16 %rs926,%rs17,%rs923;
}
	// inline asm
	// inline asm
	{add.f16 %rs938,%rs14,%rs926;
}
	// inline asm
	// inline asm
	{add.f16 %rs941,%rs938,%rs926;
}
	// inline asm
	// inline asm
	{sub.f16 %rs944,%rs17,%rs941;
}
	// inline asm
	// inline asm
	{add.f16 %rs956,%rs14,%rs944;
}
	// inline asm
	// inline asm
	{add.f16 %rs959,%rs956,%rs944;
}
	// inline asm
	// inline asm
	{sub.f16 %rs962,%rs17,%rs959;
}
	// inline asm
	// inline asm
	{add.f16 %rs974,%rs14,%rs962;
}
	// inline asm
	// inline asm
	{add.f16 %rs977,%rs974,%rs962;
}
	// inline asm
	// inline asm
	{sub.f16 %rs980,%rs17,%rs977;
}
	// inline asm
	// inline asm
	{add.f16 %rs992,%rs14,%rs980;
}
	// inline asm
	// inline asm
	{add.f16 %rs995,%rs992,%rs980;
}
	// inline asm
	// inline asm
	{sub.f16 %rs998,%rs17,%rs995;
}
	// inline asm
	// inline asm
	{add.f16 %rs1010,%rs14,%rs998;
}
	// inline asm
	// inline asm
	{add.f16 %rs1013,%rs1010,%rs998;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1016,%rs17,%rs1013;
}
	// inline asm
	// inline asm
	{add.f16 %rs1028,%rs14,%rs1016;
}
	// inline asm
	// inline asm
	{add.f16 %rs1031,%rs1028,%rs1016;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1034,%rs17,%rs1031;
}
	// inline asm
	// inline asm
	{add.f16 %rs1046,%rs14,%rs1034;
}
	// inline asm
	// inline asm
	{add.f16 %rs1049,%rs1046,%rs1034;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1052,%rs17,%rs1049;
}
	// inline asm
	// inline asm
	{add.f16 %rs1064,%rs14,%rs1052;
}
	// inline asm
	// inline asm
	{add.f16 %rs1067,%rs1064,%rs1052;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1070,%rs17,%rs1067;
}
	// inline asm
	// inline asm
	{add.f16 %rs1082,%rs14,%rs1070;
}
	// inline asm
	// inline asm
	{add.f16 %rs1085,%rs1082,%rs1070;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1088,%rs17,%rs1085;
}
	// inline asm
	// inline asm
	{add.f16 %rs1100,%rs14,%rs1088;
}
	// inline asm
	// inline asm
	{add.f16 %rs1103,%rs1100,%rs1088;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1106,%rs17,%rs1103;
}
	// inline asm
	// inline asm
	{add.f16 %rs1118,%rs14,%rs1106;
}
	// inline asm
	// inline asm
	{add.f16 %rs1121,%rs1118,%rs1106;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1124,%rs17,%rs1121;
}
	// inline asm
	// inline asm
	{add.f16 %rs1136,%rs14,%rs1124;
}
	// inline asm
	// inline asm
	{add.f16 %rs1139,%rs1136,%rs1124;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1142,%rs17,%rs1139;
}
	// inline asm
	// inline asm
	{add.f16 %rs1154,%rs14,%rs1142;
}
	// inline asm
	// inline asm
	{add.f16 %rs1157,%rs1154,%rs1142;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1160,%rs17,%rs1157;
}
	// inline asm
	// inline asm
	{add.f16 %rs1172,%rs14,%rs1160;
}
	// inline asm
	// inline asm
	{add.f16 %rs1175,%rs1172,%rs1160;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1178,%rs17,%rs1175;
}
	// inline asm
	// inline asm
	{add.f16 %rs1190,%rs14,%rs1178;
}
	// inline asm
	// inline asm
	{add.f16 %rs1193,%rs1190,%rs1178;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1196,%rs17,%rs1193;
}
	// inline asm
	// inline asm
	{add.f16 %rs1208,%rs14,%rs1196;
}
	// inline asm
	// inline asm
	{add.f16 %rs1211,%rs1208,%rs1196;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1214,%rs17,%rs1211;
}
	// inline asm
	// inline asm
	{add.f16 %rs1226,%rs14,%rs1214;
}
	// inline asm
	// inline asm
	{add.f16 %rs1229,%rs1226,%rs1214;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1232,%rs17,%rs1229;
}
	// inline asm
	// inline asm
	{add.f16 %rs1244,%rs14,%rs1232;
}
	// inline asm
	// inline asm
	{add.f16 %rs1247,%rs1244,%rs1232;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1250,%rs17,%rs1247;
}
	// inline asm
	// inline asm
	{add.f16 %rs1262,%rs14,%rs1250;
}
	// inline asm
	// inline asm
	{add.f16 %rs1265,%rs1262,%rs1250;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1268,%rs17,%rs1265;
}
	// inline asm
	// inline asm
	{add.f16 %rs1280,%rs14,%rs1268;
}
	// inline asm
	// inline asm
	{add.f16 %rs1283,%rs1280,%rs1268;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1286,%rs17,%rs1283;
}
	// inline asm
	// inline asm
	{add.f16 %rs1298,%rs14,%rs1286;
}
	// inline asm
	// inline asm
	{add.f16 %rs1301,%rs1298,%rs1286;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1304,%rs17,%rs1301;
}
	// inline asm
	// inline asm
	{add.f16 %rs1316,%rs14,%rs1304;
}
	// inline asm
	// inline asm
	{add.f16 %rs1319,%rs1316,%rs1304;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1322,%rs17,%rs1319;
}
	// inline asm
	// inline asm
	{add.f16 %rs1334,%rs14,%rs1322;
}
	// inline asm
	// inline asm
	{add.f16 %rs1337,%rs1334,%rs1322;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1340,%rs17,%rs1337;
}
	// inline asm
	// inline asm
	{add.f16 %rs1352,%rs14,%rs1340;
}
	// inline asm
	// inline asm
	{add.f16 %rs1355,%rs1352,%rs1340;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1358,%rs17,%rs1355;
}
	// inline asm
	// inline asm
	{add.f16 %rs1370,%rs14,%rs1358;
}
	// inline asm
	// inline asm
	{add.f16 %rs1373,%rs1370,%rs1358;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1376,%rs17,%rs1373;
}
	// inline asm
	// inline asm
	{add.f16 %rs1388,%rs14,%rs1376;
}
	// inline asm
	// inline asm
	{add.f16 %rs1391,%rs1388,%rs1376;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1394,%rs17,%rs1391;
}
	// inline asm
	// inline asm
	{add.f16 %rs1406,%rs14,%rs1394;
}
	// inline asm
	// inline asm
	{add.f16 %rs1409,%rs1406,%rs1394;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1412,%rs17,%rs1409;
}
	// inline asm
	// inline asm
	{add.f16 %rs1424,%rs14,%rs1412;
}
	// inline asm
	// inline asm
	{add.f16 %rs1427,%rs1424,%rs1412;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1430,%rs17,%rs1427;
}
	// inline asm
	// inline asm
	{add.f16 %rs1442,%rs14,%rs1430;
}
	// inline asm
	// inline asm
	{add.f16 %rs1445,%rs1442,%rs1430;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1448,%rs17,%rs1445;
}
	// inline asm
	// inline asm
	{add.f16 %rs1460,%rs14,%rs1448;
}
	// inline asm
	// inline asm
	{add.f16 %rs1463,%rs1460,%rs1448;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1466,%rs17,%rs1463;
}
	// inline asm
	// inline asm
	{add.f16 %rs1478,%rs14,%rs1466;
}
	// inline asm
	// inline asm
	{add.f16 %rs1481,%rs1478,%rs1466;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1484,%rs17,%rs1481;
}
	// inline asm
	// inline asm
	{add.f16 %rs1496,%rs14,%rs1484;
}
	// inline asm
	// inline asm
	{add.f16 %rs1499,%rs1496,%rs1484;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1502,%rs17,%rs1499;
}
	// inline asm
	// inline asm
	{add.f16 %rs1514,%rs14,%rs1502;
}
	// inline asm
	// inline asm
	{add.f16 %rs1517,%rs1514,%rs1502;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1520,%rs17,%rs1517;
}
	// inline asm
	// inline asm
	{add.f16 %rs1532,%rs14,%rs1520;
}
	// inline asm
	// inline asm
	{add.f16 %rs1535,%rs1532,%rs1520;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1538,%rs17,%rs1535;
}
	// inline asm
	// inline asm
	{add.f16 %rs1550,%rs14,%rs1538;
}
	// inline asm
	// inline asm
	{add.f16 %rs1553,%rs1550,%rs1538;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1556,%rs17,%rs1553;
}
	// inline asm
	// inline asm
	{add.f16 %rs1568,%rs14,%rs1556;
}
	// inline asm
	// inline asm
	{add.f16 %rs1571,%rs1568,%rs1556;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1574,%rs17,%rs1571;
}
	// inline asm
	// inline asm
	{add.f16 %rs1586,%rs14,%rs1574;
}
	// inline asm
	// inline asm
	{add.f16 %rs1589,%rs1586,%rs1574;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1592,%rs17,%rs1589;
}
	// inline asm
	// inline asm
	{add.f16 %rs1604,%rs14,%rs1592;
}
	// inline asm
	// inline asm
	{add.f16 %rs1607,%rs1604,%rs1592;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1610,%rs17,%rs1607;
}
	// inline asm
	// inline asm
	{add.f16 %rs1622,%rs14,%rs1610;
}
	// inline asm
	// inline asm
	{add.f16 %rs1625,%rs1622,%rs1610;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1628,%rs17,%rs1625;
}
	// inline asm
	// inline asm
	{add.f16 %rs1640,%rs14,%rs1628;
}
	// inline asm
	// inline asm
	{add.f16 %rs1643,%rs1640,%rs1628;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1646,%rs17,%rs1643;
}
	// inline asm
	// inline asm
	{add.f16 %rs1658,%rs14,%rs1646;
}
	// inline asm
	// inline asm
	{add.f16 %rs1661,%rs1658,%rs1646;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1664,%rs17,%rs1661;
}
	// inline asm
	// inline asm
	{add.f16 %rs1676,%rs14,%rs1664;
}
	// inline asm
	// inline asm
	{add.f16 %rs1679,%rs1676,%rs1664;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1682,%rs17,%rs1679;
}
	// inline asm
	// inline asm
	{add.f16 %rs1694,%rs14,%rs1682;
}
	// inline asm
	// inline asm
	{add.f16 %rs1697,%rs1694,%rs1682;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1700,%rs17,%rs1697;
}
	// inline asm
	// inline asm
	{add.f16 %rs1712,%rs14,%rs1700;
}
	// inline asm
	// inline asm
	{add.f16 %rs1715,%rs1712,%rs1700;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1718,%rs17,%rs1715;
}
	// inline asm
	// inline asm
	{add.f16 %rs1730,%rs14,%rs1718;
}
	// inline asm
	// inline asm
	{add.f16 %rs1733,%rs1730,%rs1718;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1736,%rs17,%rs1733;
}
	// inline asm
	// inline asm
	{add.f16 %rs1748,%rs14,%rs1736;
}
	// inline asm
	// inline asm
	{add.f16 %rs1751,%rs1748,%rs1736;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1754,%rs17,%rs1751;
}
	// inline asm
	// inline asm
	{add.f16 %rs1766,%rs14,%rs1754;
}
	// inline asm
	// inline asm
	{add.f16 %rs1769,%rs1766,%rs1754;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1772,%rs17,%rs1769;
}
	// inline asm
	// inline asm
	{add.f16 %rs1784,%rs14,%rs1772;
}
	// inline asm
	// inline asm
	{add.f16 %rs1787,%rs1784,%rs1772;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1790,%rs17,%rs1787;
}
	// inline asm
	// inline asm
	{add.f16 %rs1802,%rs14,%rs1790;
}
	// inline asm
	// inline asm
	{add.f16 %rs1805,%rs1802,%rs1790;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1839,%rs17,%rs1805;
}
	// inline asm
	// inline asm
	{add.f16 %rs1838,%rs1839,%rs17;
}
	// inline asm
	add.s32 	%r28, %r28, 100;
	setp.ne.s32	%p3, %r28, %r29;
	@%p3 bra 	BB1_5;

	ld.param.u32 	%r22, [_Z12PowerKernal1PK6__halfS1_PS_i_param_3];
	sub.s32 	%r21, %r22, %r29;
	setp.eq.s32	%p4, %r21, 0;
	@%p4 bra 	BB1_9;
	bra.uni 	BB1_7;

BB1_1:
	mov.u16 	%rs1838, %rs1839;
	bra.uni 	BB1_9;

BB1_3:
	mov.u32 	%r29, %r28;

BB1_7:
	ld.param.u32 	%r23, [_Z12PowerKernal1PK6__halfS1_PS_i_param_3];
	sub.s32 	%r30, %r29, %r23;
	// inline asm
	{add.f16 %rs1814,%rs3,%rs2;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1817,%rs3,%rs2;
}
	// inline asm

BB1_8:
	.pragma "nounroll";
	// inline asm
	{add.f16 %rs1820,%rs1814,%rs1839;
}
	// inline asm
	// inline asm
	{add.f16 %rs1823,%rs1820,%rs1839;
}
	// inline asm
	// inline asm
	{sub.f16 %rs1839,%rs1817,%rs1823;
}
	// inline asm
	// inline asm
	{add.f16 %rs1838,%rs1839,%rs1817;
}
	// inline asm
	add.s32 	%r30, %r30, 1;
	setp.ne.s32	%p5, %r30, 0;
	@%p5 bra 	BB1_8;

BB1_9:
	ld.param.u64 	%rd12, [_Z12PowerKernal1PK6__halfS1_PS_i_param_2];
	cvta.to.global.u64 	%rd1, %rd12;
	bar.sync 	0;
	mov.u32 	%r27, %tid.x;
	mov.u32 	%r26, %ntid.x;
	mov.u32 	%r25, %ctaid.x;
	mad.lo.s32 	%r24, %r25, %r26, %r27;
	// inline asm
	{add.f16 %rs1832,%rs1838,%rs1839;
}
	// inline asm
	mul.wide.s32 	%rd10, %r24, 2;
	add.s64 	%rd11, %rd1, %rd10;
	st.global.u16 	[%rd11], %rs1832;
	ret;
}


